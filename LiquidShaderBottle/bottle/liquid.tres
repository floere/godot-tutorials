[gd_resource type="VisualShader" load_steps=28 format=2]

[ext_resource path="res://bottle/PerlinNoise3D.gd" type="Script" id=1]
[ext_resource path="res://addons/visual_shader_node_library/shader_nodes/common/rotation_2d.gd" type="Script" id=2]

[sub_resource type="VisualShaderNodeScalarUniform" id=1]
uniform_name = "NoiseScale"

[sub_resource type="VisualShaderNodeScalarOp" id=2]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "time"

[sub_resource type="VisualShaderNodeInput" id=5]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeColorUniform" id=6]
uniform_name = "Color"

[sub_resource type="VisualShaderNodeScalarOp" id=7]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=8]
uniform_name = "EdgeRotation"

[sub_resource type="VisualShaderNodeScalarClamp" id=9]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeTexture" id=10]
output_port_for_preview = 0
source = 2
texture_type = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=11]
uniform_name = "MinOpacity"

[sub_resource type="VisualShaderNodeTextureUniform" id=12]
output_port_for_preview = 1
uniform_name = "FillTexture"

[sub_resource type="VisualShaderNodeVectorOp" id=13]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, -0.75, 0 ) ]

[sub_resource type="VisualShaderNodeVectorCompose" id=14]

[sub_resource type="VisualShaderNodeScalarUniform" id=15]
uniform_name = "Fill"

[sub_resource type="VisualShaderNodeScalarOp" id=16]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 1

[sub_resource type="VisualShaderNodeVectorCompose" id=17]
output_port_for_preview = 0
default_input_values = [ 0, 0.5, 1, 0.2, 2, 0.0 ]

[sub_resource type="VisualShaderNodeVectorOp" id=18]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=19]
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id=20]

[sub_resource type="VisualShaderNodeVectorCompose" id=21]
default_input_values = [ 0, 1.0, 1, 1.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeScalarFunc" id=22]
function = 1

[sub_resource type="VisualShaderNodeCustom" id=24]
output_port_for_preview = 0
initialized = true
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeCustom" id=25]
output_port_for_preview = 0
initialized = true
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeVec3Constant" id=27]

[sub_resource type="VisualShaderNodeVectorOp" id=26]
output_port_for_preview = 0
operator = 2

[resource]
code = "shader_type canvas_item;
uniform vec4 Color : hint_color;
uniform float EdgeRotation;
uniform float Fill;
uniform sampler2D FillTexture;
uniform float NoiseScale;
uniform float MinOpacity;


// Rotation2D

void rotation_2d(float angle, vec3 pivot, in vec3 position_in,  out vec3 position_out) {
	mat2 rotation_matrix = mat2( vec2(cos(angle), -sin(angle)), vec2(sin(angle), cos(angle)));
	position_in -= pivot;
	position_out.xy = rotation_matrix * position_in.xy;
	position_out.z = position_in.z;
	position_out += pivot;
	
}
// PerlinNoise3D

		vec3 mod289_3(vec3 x) {
			return x - floor(x * (1.0 / 289.0)) * 289.0;
		}

		vec4 mod289_4(vec4 x) {
			return x - floor(x * (1.0 / 289.0)) * 289.0;
		}

		vec4 permute(vec4 x) {
			return mod289_4(((x * 34.0) + 1.0) * x);
		}

		vec4 taylorInvSqrt(vec4 r) {
			return 1.79284291400159 - 0.85373472095314 * r;
		}

		vec3 fade(vec3 t) {
			return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
		}

		// Classic Perlin noise.
		float cnoise(vec3 P) {
			vec3 Pi0 = floor(P); // Integer part for indexing.
			vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1.
			Pi0 = mod289_3(Pi0);
			Pi1 = mod289_3(Pi1);
			vec3 Pf0 = fract(P); // Fractional part for interpolation.
			vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0.
			vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
			vec4 iy = vec4(Pi0.yy, Pi1.yy);
			vec4 iz0 = vec4(Pi0.z);
			vec4 iz1 = vec4(Pi1.z);

			vec4 ixy = permute(permute(ix) + iy);
			vec4 ixy0 = permute(ixy + iz0);
			vec4 ixy1 = permute(ixy + iz1);

			vec4 gx0 = ixy0 * (1.0 / 7.0);
			vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
			gx0 = fract(gx0);
			vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
			vec4 sz0 = step(gz0, vec4(0.0));
			gx0 -= sz0 * (step(0.0, gx0) - 0.5);
			gy0 -= sz0 * (step(0.0, gy0) - 0.5);

			vec4 gx1 = ixy1 * (1.0 / 7.0);
			vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
			gx1 = fract(gx1);
			vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
			vec4 sz1 = step(gz1, vec4(0.0));
			gx1 -= sz1 * (step(0.0, gx1) - 0.5);
			gy1 -= sz1 * (step(0.0, gy1) - 0.5);

			vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);
			vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);
			vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);
			vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);
			vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);
			vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);
			vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);
			vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);

			vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
			g000 *= norm0.x;
			g010 *= norm0.y;
			g100 *= norm0.z;
			g110 *= norm0.w;
			vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
			g001 *= norm1.x;
			g011 *= norm1.y;
			g101 *= norm1.z;
			g111 *= norm1.w;

			float n000 = dot(g000, Pf0);
			float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
			float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
			float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
			float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
			float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
			float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
			float n111 = dot(g111, Pf1);

			vec3 fade_xyz = fade(Pf0);
			vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
			vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
			float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
			return 2.2 * n_xyz;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:2
	vec3 n_out2p0 = Color.rgb;
	float n_out2p1 = Color.a;

// Texture:36
	vec3 n_out36p0;
	float n_out36p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out36p0 = _tex_read.rgb;
		n_out36p1 = _tex_read.a;
	}

// VectorOp:9
	vec3 n_out9p0 = n_out2p0 * n_out36p0;

// ScalarUniform:25
	float n_out25p0 = EdgeRotation;

// VectorCompose:48
	float n_in48p0 = 0.50000;
	float n_in48p1 = 0.20000;
	float n_in48p2 = 0.00000;
	vec3 n_out48p0 = vec3(n_in48p0, n_in48p1, n_in48p2);

// Input:16
	vec3 n_out16p0 = vec3(UV, 0.0);

// VectorOp:50
	vec3 n_out50p0 = n_out16p0 - n_out48p0;

// ScalarFunc:53
	float n_out53p0 = cos(n_out25p0);

// VectorCompose:52
	float n_in52p1 = 1.00000;
	float n_in52p2 = 1.00000;
	vec3 n_out52p0 = vec3(n_out53p0, n_in52p1, n_in52p2);

// VectorOp:49
	vec3 n_out49p0 = n_out50p0 * n_out52p0;

// VectorOp:51
	vec3 n_out51p0 = n_out49p0 + n_out48p0;

// ScalarUniform:44
	float n_out44p0 = Fill;

// ScalarOp:45
	float n_in45p1 = 1.00000;
	float n_out45p0 = n_out44p0 - n_in45p1;

// VectorCompose:43
	float n_in43p0 = 0.00000;
	float n_in43p2 = 0.00000;
	vec3 n_out43p0 = vec3(n_in43p0, n_out45p0, n_in43p2);

// VectorOp:40
	vec3 n_out40p0 = n_out51p0 + n_out43p0;

// Rotation2D:56
	vec3 n_out56p0;
	{
		rotation_2d(n_out25p0, n_out48p0, n_out40p0, n_out56p0);
	}

// TextureUniform:38
	vec3 n_out38p0;
	float n_out38p1;
	{
		vec4 n_tex_read = texture(FillTexture, n_out56p0.xy);
		n_out38p0 = n_tex_read.rgb;
		n_out38p1 = n_tex_read.a;
	}

// ScalarOp:23
	float n_out23p0 = n_out36p1 * n_out38p1;

// Vector:57
	vec3 n_out57p0 = vec3(0.000000, 0.000000, 0.000000);

// ScalarUniform:11
	float n_out11p0 = NoiseScale;

// Input:14
	float n_out14p0 = TIME;

// PerlinNoise3D:55
	float n_out55p0;
	{
		n_out55p0 = cnoise(vec3((n_out16p0.xy + n_out57p0.xy) * n_out11p0, n_out14p0)) * 0.5 + 0.5;
	}

// ScalarUniform:37
	float n_out37p0 = MinOpacity;

// ScalarClamp:35
	float n_in35p2 = 1.00000;
	float n_out35p0 = clamp(n_out55p0, n_out37p0, n_in35p2);

// ScalarOp:12
	float n_out12p0 = n_out23p0 * n_out35p0;

// Output:0
	COLOR.rgb = n_out9p0;
	COLOR.a = n_out12p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1437, -1009.88 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 2680, 200 )
nodes/fragment/2/node = SubResource( 6 )
nodes/fragment/2/position = Vector2( 1120, -640 )
nodes/fragment/9/node = SubResource( 26 )
nodes/fragment/9/position = Vector2( 2020, -140 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( -380, 940 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( 1680, 520 )
nodes/fragment/14/node = SubResource( 3 )
nodes/fragment/14/position = Vector2( -300, 1140 )
nodes/fragment/16/node = SubResource( 5 )
nodes/fragment/16/position = Vector2( -2960, 520 )
nodes/fragment/23/node = SubResource( 7 )
nodes/fragment/23/position = Vector2( 1020, 100 )
nodes/fragment/25/node = SubResource( 8 )
nodes/fragment/25/position = Vector2( -2580, -520 )
nodes/fragment/35/node = SubResource( 9 )
nodes/fragment/35/position = Vector2( 840, 800 )
nodes/fragment/36/node = SubResource( 10 )
nodes/fragment/36/position = Vector2( 240, -760 )
nodes/fragment/37/node = SubResource( 11 )
nodes/fragment/37/position = Vector2( 280, 1340 )
nodes/fragment/38/node = SubResource( 12 )
nodes/fragment/38/position = Vector2( 260, -160 )
nodes/fragment/40/node = SubResource( 13 )
nodes/fragment/40/position = Vector2( -1020, -160 )
nodes/fragment/43/node = SubResource( 14 )
nodes/fragment/43/position = Vector2( -1560, -80 )
nodes/fragment/44/node = SubResource( 15 )
nodes/fragment/44/position = Vector2( -2460, -20 )
nodes/fragment/45/node = SubResource( 16 )
nodes/fragment/45/position = Vector2( -1980, -80 )
nodes/fragment/48/node = SubResource( 17 )
nodes/fragment/48/position = Vector2( -2440, -1540 )
nodes/fragment/49/node = SubResource( 18 )
nodes/fragment/49/position = Vector2( -1280, -1320 )
nodes/fragment/50/node = SubResource( 19 )
nodes/fragment/50/position = Vector2( -1720, -1480 )
nodes/fragment/51/node = SubResource( 20 )
nodes/fragment/51/position = Vector2( -720, -1100 )
nodes/fragment/52/node = SubResource( 21 )
nodes/fragment/52/position = Vector2( -1720, -940 )
nodes/fragment/53/node = SubResource( 22 )
nodes/fragment/53/position = Vector2( -2180, -880 )
nodes/fragment/55/node = SubResource( 24 )
nodes/fragment/55/position = Vector2( 280, 840 )
nodes/fragment/56/node = SubResource( 25 )
nodes/fragment/56/position = Vector2( -420, -320 )
nodes/fragment/57/node = SubResource( 27 )
nodes/fragment/57/position = Vector2( -1180, 880 )
nodes/fragment/connections = PoolIntArray( 2, 0, 9, 0, 23, 0, 12, 0, 36, 0, 9, 1, 36, 1, 23, 0, 37, 0, 35, 1, 9, 0, 0, 0, 43, 0, 40, 1, 44, 0, 45, 0, 45, 0, 43, 1, 16, 0, 50, 0, 48, 0, 50, 1, 50, 0, 49, 0, 49, 0, 51, 0, 48, 0, 51, 1, 51, 0, 40, 0, 52, 0, 49, 1, 53, 0, 52, 0, 38, 1, 23, 1, 12, 0, 0, 1, 35, 0, 12, 1, 25, 0, 53, 0, 55, 0, 35, 0, 11, 0, 55, 2, 14, 0, 55, 3, 16, 0, 55, 0, 40, 0, 56, 2, 48, 0, 56, 1, 25, 0, 56, 0, 56, 0, 38, 0, 57, 0, 55, 1 )
